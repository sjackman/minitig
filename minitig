#!/usr/bin/env python3
"""
Minitig: Assemble reads into contigs using minimizers
Written by Shaun Jackman @sjackman
"""

import argparse
import sys

import cityhash
from readfq import read_fasta

def kmerize(k, seq):
	"Iterator over the kmers of a string."
	for i in range(0, len(seq) - k + 1):
		yield seq[i : i + k]

def hash_kmer(kmer):
	"Hash a k-mer"
	return cityhash.CityHash32(kmer)

def minimerize(k, w, seq):
	"Return the minimizers of a string."
	hashes = [hash_kmer(kmer) for kmer in kmerize(k, seq)]
	minimizers = []
	previous_minimizer = -1
	for i in range(0, len(hashes) - w + 1):
		minimizer, minimizer_i = min((x, i) for (i, x) in enumerate(hashes[i : i + w]))
		minimizer_i += i
		if minimizer_i > previous_minimizer:
			previous_minimizer = minimizer_i
			minimizers.append(minimizer)
	return minimizers

def minitig_index():
	"Index a set of sequences"
	for filename in ARGS.FASTA:
		with open(filename) as fin:
			for _, seq in read_fasta(fin):
				print(minimerize(ARGS.k, ARGS.w, seq))

def minitig_map():
	"Map sequences"
	print("strict digraph {")
	for filename in ARGS.FASTA:
		with open(filename) as fin:
			for name, seq in read_fasta(fin):
				print("//", name)
				minimizers = minimerize(ARGS.k, ARGS.w, seq)
				for u, v in zip(minimizers, minimizers[1:]):
					print(u, "->", v)
	print("}")

def parse_arguments():
	"Parse the command line arguments."
	argparser = argparse.ArgumentParser()
	argparser.add_argument(
		"-k", "--k", action="store", type=int, required=True,
		help="size of a k-mer (bp)")
	argparser.add_argument(
		"-w", "--window", action="store", dest="w", type=int, required=True,
		help="number of k-mers in a window of size k + w - 1 bp")
	argparser.add_argument(
		"command",
		help="One of the commands: index or map")
	argparser.add_argument(
		"FASTA", nargs="+",
		help="FASTA file of sequences to be assembled")
	return argparser.parse_args()

def main():
	"Process each file specified on the command line"
	ARGS.FASTA = ["/dev/stdin" if s == "-" else s for s in ARGS.FASTA]
	if ARGS.command == "index":
		minitig_index()
	elif ARGS.command == "map":
		minitig_map()
	else:
		print("Unrecognized command: ", ARGS.command, file=sys.stderr)
		exit(1)

if __name__ == "__main__":
	ARGS = parse_arguments()
	main()
