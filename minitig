#!/usr/bin/env python3
"""
Minitig: Assemble reads into contigs using minimizers
Written by Shaun Jackman @sjackman
"""

import argparse
import sys

from readfq import read_fasta

def kmerize(k, seq):
	"Iterator over the kmers of a string."
	for i in range(0, len(seq) - k + 1):
		yield seq[i : i + k]

def hash_int(key, mask=0xffffffffffffffff):
	"""
	Hash a 64-bit integer (invertible).
	See https://gist.github.com/lh3/59882d6b96166dfc3d8d
	"""
	assert 0 <= key < 0x10000000000000000
	key = (~key + (key << 21)) & mask # key = (key << 21) - key - 1
	key = key ^ key >> 24
	key = ((key + (key << 3)) + (key << 8)) & mask # key * 265
	key = key ^ key >> 14
	key = ((key + (key << 2)) + (key << 4)) & mask # key * 21
	key = key ^ key >> 28
	key = (key + (key << 31)) & mask
	assert 0 <= key < 0x10000000000000000
	return key

def unhash_int(key, mask=0xffffffffffffffff):
	"""
	Invert hash_int.
	https://gist.githubusercontent.com/lh3/974ced188be2f90422cc/raw/55fbbb63e489328fd9d1641897954ca997b65951/inthash.c
	"""
	assert 0 <= key < 0x10000000000000000

	# Invert key = key + (key << 31)
	tmp = (key - (key << 31))
	key = (key - (tmp << 31)) & mask

	# Invert key = key ^ (key >> 28)
	tmp = key ^ key >> 28
	key = key ^ tmp >> 28

	# Invert key *= 21
	key = (key * 14933078535860113213) & mask

	# Invert key = key ^ (key >> 14)
	tmp = key ^ key >> 14
	tmp = key ^ tmp >> 14
	tmp = key ^ tmp >> 14
	key = key ^ tmp >> 14

	# Invert key *= 265
	key = (key * 15244667743933553977) & mask

	# Invert key = key ^ (key >> 24)
	tmp = key ^ key >> 24
	key = key ^ tmp >> 24

	# Invert key = (~key) + (key << 21)
	tmp = ~key
	tmp = ~(key - (tmp << 21))
	tmp = ~(key - (tmp << 21))
	key = ~(key - (tmp << 21)) & mask

	assert 0 <= key < 0x10000000000000000
	return key

# Translate the ACGT to ASCII 0-3.
TRANSLATE_ACGT_0123 = str.maketrans("ACGT", "\0\1\2\3")

# Translate the ASCII 0-3 to ACGT.
TRANSLATE_0123_ACGT = str.maketrans("\0\1\2\3", "ACGT")

def kmer_to_int(kmer):
	"Convert a k-mer to an integer."
	x = 0
	for c in kmer.translate(TRANSLATE_ACGT_0123):
		assert 0 <= ord(c) < 4
		x <<= 2
		x += ord(c)
	return x

def int_to_kmer(x, k):
	"Convert an integer to a k-mer."
	assert x >= 0
	xs = k * [None]
	for i in reversed(range(k)):
		xs[i] = chr(x & 3)
		x >>= 2
	assert x == 0
	return str.join("", xs).translate(TRANSLATE_0123_ACGT)

def hash_kmer(kmer):
	"Hash a k-mer to an integer."
	return hash_int(kmer_to_int(kmer))

def unhash_kmer(x, k):
	"Unhash an integer to a k-mer."
	return int_to_kmer(unhash_int(x), k)

def minimerize(k, w, seq):
	"Return the minimizers of a string."
	hashes = [hash_kmer(kmer) for kmer in kmerize(k, seq)]
	minimizers = []
	previous_minimizer = -1
	for i in range(0, len(hashes) - w + 1):
		minimizer, minimizer_i = min((x, i) for (i, x) in enumerate(hashes[i : i + w]))
		minimizer_i += i
		if minimizer_i > previous_minimizer:
			previous_minimizer = minimizer_i
			minimizers.append(minimizer)
	return minimizers

def overlap(a, b):
	"Find the longest overlap of two strings and return the consensus."
	if a == "":
		return b
	for i in reversed(range(1, min(len(a), len(b)))):
		if a[-i:] == b[0:i]:
			return a + b[i:]
	return a + "-" + b

class Graph:
	"A graph of minimizers."

	def __init__(self):
		"Create an empty graph."
		self.vertices = {}
		self.seqs = {}
		self.edges = {}
		self.in_degrees = {}

	def out_degree(self, u):
		"Return the out-degree of vertex u."
		return len(self.edges[u])

	def in_degree(self, u):
		"Return the in-degree of vertex u."
		return self.in_degrees[u]

	def seq(self, u):
		"Return the sequence of vertex u."
		return self.seqs[u] if u in self.seqs else unhash_kmer(u, ARGS.k)

	def remove_vertex(self, u):
		"Remove a vertex from the graph."
		for v in self.edges[u]:
			assert self.in_degrees[v] > 0
			self.in_degrees[v] -= 1
		del self.edges[u]
		del self.vertices[u]
		if u in self.seqs:
			del self.seqs[u]

	def add_vertex(self, u):
		"Add a vertex to the graph."
		if u in self.vertices:
			self.vertices[u] += 1
		else:
			self.vertices[u] = 1
			self.edges[u] = {}
			self.in_degrees[u] = 0

	def add_edge(self, u, v):
		"Add an edge to the graph."
		if v in self.edges[u]:
			self.edges[u][v] += 1
		else:
			self.edges[u][v] = 1
			self.in_degrees[v] += 1

	def remove_edge(self, u, v):
		"Remove an edge from the graph."
		assert self.in_degrees[v] > 0
		self.in_degrees[v] -= 1
		del self.edges[u][v]

	def add_path(self, path):
		"Add a path to the graph."
		for u in path:
			self.add_vertex(u)
		for u, v in zip(path, path[1:]):
			self.add_edge(u, v)

	def add_sequence(self, seq):
		"Add a sequence to the graph."
		self.add_path(minimerize(ARGS.k, ARGS.w, seq))

	def erode_vertex(self, e, u):
		"Remove a terminal vertex with weight < e."
		if self.vertices[u] < e and self.in_degree(u) == 0:
			vs = self.edges[u]
			self.remove_vertex(u)
			for v in vs:
				self.erode_vertex(e, v)

	def erode(self, min_e):
		"Remove terminal vertices with weight < min_e."
		for u in list(self.vertices):
			if u in self.vertices:
				self.erode_vertex(min_e, u)
		n = 1
		while n > 0:
			n = 0
			for u in list(self.vertices):
				if u not in self.vertices:
					continue
				for v in list(self.edges[u]):
					if self.vertices[v] < min_e and self.out_degree(v) == 0 and self.in_degree(v) == 1:
						self.remove_edge(u, v)
						self.remove_vertex(v)
						n += 1

	def follow_path(self, u):
		"Follow the path starting at u."
		path = [u]
		while self.out_degree(u) == 1:
			u = next(iter(self.edges[u]))
			if self.in_degree(u) != 1:
				break
			path.append(u)
		return path

	def contract_path(self, path):
		"Contract the edges in the path."
		if len(path) == 1:
			return
		count = 0
		seq = ""
		for u in path:
			count += self.vertices[u]
			seq = overlap(seq, self.seq(u))
		vs = self.edges[path[-1]]
		self.remove_edge(path[0], path[1])
		for u in path[1:]:
			self.remove_vertex(u)
		u = path[0]
		self.seqs[u] = seq
		self.vertices[u] = count
		for v in vs:
			self.add_edge(u, v)

	def compact(self):
		"Compact the graph by contracting all simple paths."
		for u in list(self.vertices):
			if u not in self.vertices:
				continue
			self.contract_path(self.follow_path(u))

	def write_fasta(self, fout):
		"Write this graph to a FASTA file."
		for u in self.vertices:
			seq = self.seq(u)
			print(">", u, " LN:i:", len(seq), " mc:i:", self.vertices[u], "\n",
				seq,
				sep="", file=fout)

	def write_graphviz(self, fout):
		"Write this graph to a Graphviz file."
		print("strict digraph {", file=fout)
		for u in self.vertices:
			print(u, " [label=", self.vertices[u], "]", sep="", file=fout)
		for u in self.vertices:
			for v in self.edges[u]:
				print(u, " -> ", v, " [label=", self.edges[u][v], "]", sep="", file=fout)
		print("}", file=fout)

def minitig_assemble():
	"Assemble unitigs and produce FASTA."
	for filename in ARGS.FASTA:
		with open(filename) as fin:
			g = Graph()
			for _, seq in read_fasta(fin):
				g.add_sequence(seq.upper())
			g.erode(ARGS.e)
			g.compact()
			g.write_fasta(sys.stdout)
			if ARGS.graph != None:
				with open(ARGS.graph, "w") as fout:
					g.write_graphviz(fout)

def minitig_index():
	"Index a set of sequences."
	for filename in ARGS.FASTA:
		with open(filename) as fin:
			for _, seq in read_fasta(fin):
				seq = seq.upper()
				print(minimerize(ARGS.k, ARGS.w, seq))

def minitig_graph():
	"Create a graph of the minimizers."
	g = Graph()
	for filename in ARGS.FASTA:
		with open(filename) as fin:
			for _, seq in read_fasta(fin):
				g.add_sequence(seq.upper())
	g.write_graphviz(sys.stdout)

def parse_arguments():
	"Parse the command line arguments."
	argparser = argparse.ArgumentParser()
	argparser.add_argument(
		"-k", "--k", action="store", type=int, required=True,
		help="size of a k-mer (bp)")
	argparser.add_argument(
		"-w", "--window", action="store", dest="w", type=int, required=True,
		help="number of k-mers in a window of size k + w - 1 bp")
	argparser.add_argument(
		"-e", "--erode", action="store", dest="e", type=int, default=2,
		help="erode terminal minimizers with frequency less than the threshold")
	argparser.add_argument(
		"-g", "--graph", action="store",
		help="write the graph to a file")
	argparser.add_argument(
		"command",
		help="A command: assemble, graph, index")
	argparser.add_argument(
		"FASTA", nargs="+",
		help="FASTA file of sequences to be assembled")
	return argparser.parse_args()

def main():
	"Process each file specified on the command line"
	ARGS.FASTA = ["/dev/stdin" if s == "-" else s for s in ARGS.FASTA]
	if ARGS.command == "assemble":
		minitig_assemble()
	elif ARGS.command == "graph":
		minitig_graph()
	elif ARGS.command == "index":
		minitig_index()
	else:
		print("Unrecognized command: ", ARGS.command, file=sys.stderr)
		exit(1)

if __name__ == "__main__":
	ARGS = parse_arguments()
	main()
